## możliwe stany pliku
### untracked
- różnica między add *, a add . <- jedno dodaje untracked, drugie nie
- chcemy usunąć z repo ale zostawić plik
git rm --cached -> przenosi do untracked
git rm --cached `git ls-files -X .gitignore` -> untrackuje pliki wpisane do .gitignore

### unmodified

### modified

### staged

--wykres

## commit
- snapshot heada
- flaga -m
- flaga -c, -C
git commit -c --reset-author
git commit -C --reset-author
- commitowanie przed plikami dodanymi
git commit <filename>


## tag
### annotated
git tag -a v1.4 -m "my version 1.4"
### lightweight
git tag v1.4
### komendy
git tag
git checkout v1.4
git checkout -b version2 v2.0.0 <- gdy chcemy wprowadzać zmiany musimy najpierw stworzyć brancha bo inaczej commity nie będą osiągalne


#### gitignore
- standard glob
- *
- [abc]
- ?
- [0-9]
- a/**/z -> a/z, a/b/z, a/b/c/z
- !


## stash
- stashowanie
git stash
git stash push
- przywracanie
git stash apply
git stash apply stash@{2}
git stash pop
git stash pop stash@{2}
- usuwanie (apply nie usuwa stasha, ale pop tak)
git stash drop
git stash drop stash@{2}
- listowanie i przeglądanie
git stash list
git stash show stash@{1}

## conflict

## branch
git branch name
git checkout -b <newbranchname>.
### o branchach
- listowanie branchów (* - aktywny branch)
git branch
git branch -v <- listuje branche i pokazuje ostatni commit na każdym
git branch -vv <- listuje branche, pokazuje ostatni commit i upstream branch każdego z nich
git branch --merged <- pokazuje branche zmergowane do aktywnego brancha (gotowe do usunięcia); można dodać nazwę brancha jeśli nie chcemy sprawdzać w perspektywie obecnego tylko jakiegoś innego
- zmiana nazwy
git branch --move bad-branch-name corrected-branch-name <- zmienia nazwę lokalnie
git push --set-upstream origin corrected-branch-name <- aktualizuje nazwę remote
git push origin --delete bad-branch-name
- pobieranie brancha z remote
git checkout -b serverfix origin/serverfix
git checkout --track origin/serverfix <- to samo co wyżej ale "skrócone"
- nadanie upstream brancha do trackowania obecnego lokalnego brancha albo zmiana trakującego remote brancha na inny
git branch -u origin/serverfix
### podejścia
#### long-running branches
- master/main
- develop
- topic
- proposed
- branche o różnym stopniu stabilności
- raczej duże projekty
-- schemat
#### topic branching
- potrzeba implementacyjna = nowy branch
- skończone implementacje merguje się do mastera
--schemat

## merge
git merge branch2 <- branch2 wmergowuje w branch1
### fast-forward
- znacznik na branch1 jest po prostu przesuwany o commity z brancha2 (commity na b2 są bezpośrednią kontynuacją b1 więc mogą być kontynuowane bez żadnych dodatkowych akcji)
- nie jest potrzebny dodatkowy commit
### basic merge
- trzyetapowe łączenie - dwa ostatnie commity z obu branchy i ich ostatni wspólny commit
- branch1 ma commity których nie uwzględnia branch2
- jest robiony dodatkowy commit dla merge
### basic merge conflict
- HEAD - branch na którym byliśmy w momencie mergowania
- konflikt w pliku rozdzielany <<<<<<HEAD ....... ========== ....... >>>>>>>>> b2
- commitujemy zmiany przy rozwiązywaniu konfliktów
### ogólne info
- pobieranie zmian z remote do obecnego brancha bez tworzenia nowego
git merge origin/serverfix

### po zmergowaniu
- można usunąć branch wmergowany w inny branch - commity i tak się przeniosły do b1, a usuwanie nieużywanych, zmergowanych branchy usprawnia czytelność projektu
git branch -d branch2

- jeden commit mergowy

## push
git push origin serverfix:awesomebranch <- zmienia nazwę brancha remote

## fetch
- aktualizuje informacje (metadane) o zmianach na remote repo, ale nie wykonuje transferu plików

## pull
- fetchuje remote branche które trackuje aktualny branch
- próbuje łączyć zmiany z remote z lokalnym branchem

## rebase
- wraca się do ostatniego wspólnego commita b1 i b2, do b1 dodaje wszystkie commity które były w b2, a następnie dodaje commity od siebie
git rebase b1
git checkout b1
git merge b2
- czystsza historia projektu - w logach commitów przedstawia się jako spójna historia
## alias
git config alias.co checkout
git config alias.br branch
git config alias.ci commit
git config alias.st status


## ciekawe opcje i komendy
- zobaczyć output bez wykonywania samej komendy
flaga: -n, --dry-run
- logi z innego brancha niż aktualny
git log branchname
- logi z graficznym przedstawieniem branchy
git log --oneline --decorate --graph --all
- zmiana domyślnego edytora do commitów
git config core.editor notepad

## ciekawe rzeczy
- w gicie tworzenie nowych branchy i ich mergowanie jest stosunkowo szybkim procesem, a same branche nie są zasobożerne (a przynajmniej tak zachwalają giciarze)













